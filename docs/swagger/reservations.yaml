openapi: '3.0.3'
info:
  title: Reservations API
  version: '1.2'  # Updated version

servers:
  - url: http://localhost:3000/  # Reservations service
  - url: http://localhost:3001/  # Authentication service

paths:
  /reservations:
    get:
      summary: Retrieve a list of reservations
      responses:
        '200':
          description: List of reservations retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reservation'
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      summary: Create a new reservation
      security:
        - bearerAuth: []  # Require authentication
      requestBody:
        description: Reservation object to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReservationDto'
      responses:
        '201':
          description: Reservation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'  # Added Forbidden response
        '500':
          $ref: '#/components/responses/ServerError'

  /reservations/{id}:
    get:
      summary: Retrieve reservation by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Unique reservation ID
      responses:
        '200':
          description: Reservation retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    patch:
      summary: Update reservation by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Unique reservation ID
      requestBody:
        description: Updated reservation object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateReservationDto'
      responses:
        '200':
          description: Reservation updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      summary: Delete reservation by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Unique reservation ID
      responses:
        '204':
          description: Reservation deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /users/register:
    post:
      summary: Register a new user
      requestBody:
        description: User object to register
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDto'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User registered successfully"
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /auth/login:
    post:
      summary: Login a user
      requestBody:
        description: User credentials to log in
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "User authenticated"
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          _id:
                            type: string
                            example: "6728c95681ddd30cdeba4952"
                          email:
                            type: string
                            example: "kdptanzim0@gmail.com"
                          password:
                            type: string
                            example: "$2a$10$3L.i2nuin7TYVXewSFcDnejV2EgsWsk8JMSFvCeOlMxpHBG4AvnFO"
                      token:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  schemas:
    Reservation:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the reservation
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the reservation creation
        startDate:
          type: string
          format: date-time
          description: Start date of the reservation
        endDate:
          type: string
          format: date-time
          description: End date of the reservation
        userId:
          type: string
          description: User ID associated with the reservation
        invoiceId:
          type: string
          description: Invoice ID for the reservation

    CreateReservationDto:
      type: object
      required:
        - startDate
        - endDate
        - charge
      properties:
        startDate:
          type: string
          format: date-time
          description: Start date for the reservation
        endDate:
          type: string
          format: date-time
          description: End date for the reservation
        charge:
          type: object
          $ref: '#/components/schemas/CreateChargeDto'  # Referencing charge structure

    UpdateReservationDto:
      type: object
      properties:
        startDate:
          type: string
          format: date-time
          description: Start date for the reservation
        endDate:
          type: string
          format: date-time
          description: End date for the reservation
        charge:
          type: object
          $ref: '#/components/schemas/CreateChargeDto'  # Referencing charge structure

    CreateChargeDto:
      type: object
      required:
        - card
        - amount
      properties:
        card:
          type: object
          $ref: '#/components/schemas/CardDto'
        amount:
          type: number
          description: Amount to be charged

    CardDto:
      type: object
      required:
        - number
        - exp_month
        - exp_year
      properties:
        cvc:
          type: string
          description: Card Verification Code
        exp_month:
          type: number
          description: Expiration month of the card
        exp_year:
          type: number
          description: Expiration year of the card
        number:
          type: string
          description: Credit card number

    RegisterDto:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: Email address for the new user
        password:
          type: string
          description: Password for the new user

    LoginDto:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: Email address for the user
        password:
          type: string
          description: Password for the user

  responses:
    BadRequest:
      description: Bad request due to invalid or missing parameters
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                example: 400
              error:
                type: string
                example: Bad Request
              message:
                type: array
                items:
                  type: string
                  example: "startDate must be a Date instance"

    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                example: 404
              error:
                type: string
                example: Not Found
              message:
                type: string
                example: "Reservation not found"

    Forbidden:
      description: Forbidden resource access due to lack of authentication
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                example: 403
              error:
                type: string
                example: Forbidden
              message:
                type: string
                example: "Unauthorized access"

    Unauthorized:
      description: User authentication failed
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                example: 401
              error:
                type: string
                example: Unauthorized
              message:
                type: string
                example: "Invalid credentials"

    ServerError:
      description: Internal server error occurred
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                example: 500
              error:
                type: string
                example: Internal Server Error
              message:
                type: string
                example: "An unexpected error occurred"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

      
